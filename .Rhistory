library(here)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(rgdal)
library(sp)
library(rgeos)
library(tidyverse)
library(magrittr)
library(here)
here()
#get list of all files in directory
shp_files <- list.files(here("zoning_data"))
ls(here("zoning_data, Individual Landmakrs"))
ls(here("zoning_data, Individual Landmarks"))
ls(here("zoning_data", "Individual Landmarks"))
list.files(here("zoning_data", "Individual Landmarks"))
list.files("C:/Users/7450/Documents/Harris MPP/Q5/Data Viz/project_chicago_zoning/zoning_data/Individual Landmarks")
list.files(here("Individual Landmarks"))
list.files(here("Boundaries - Wards (2015-)"))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(rgdal)
library(sp)
library(rgeos)
library(tidyverse)
library(magrittr)
library(here)
#get list of all files in directory
shp_files <- list.files(here("zoning_data"))
read_shps <- function(x){
#get directory of specific shapefile
file <- paste0(dir, "/", x)
#get layer name of shapfile in file directory
layer <- list.files(file)[1] %>% substr(1, nchar(list.files(file)[1]) -4)
#read in shapefile
temp <- readOGR(file, layer = layer)
#convert ordinance dates from string to date format
temp@data$EDIT_DATE <- temp@data$EDIT_DATE %>% as.Date()
#assign shapefile name indicating its timeperiod
name <- str_replace_all(layer, " ", "_")
name <- substr(name, nchar(name) - 6, nchar(name))
assign(name, temp, envir = .GlobalEnv)
}
#use custom function to read in all shapefiles
sapply(shp_files, read_shps) %>% invisible()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(rgdal)
library(sp)
library(rgeos)
library(tidyverse)
library(magrittr)
library(here)
#get list of all files in directory
shp_files <- list.files(here("zoning_data"))
read_shps <- function(x){
#get directory of specific shapefile
file <- paste0(here("zoning_data"), "/", x)
#get layer name of shapfile in file directory
layer <- list.files(file)[1] %>% substr(1, nchar(list.files(file)[1]) -4)
#read in shapefile
temp <- readOGR(file, layer = layer)
#convert ordinance dates from string to date format
temp@data$EDIT_DATE <- temp@data$EDIT_DATE %>% as.Date()
#assign shapefile name indicating its timeperiod
name <- str_replace_all(layer, " ", "_")
name <- substr(name, nchar(name) - 6, nchar(name))
assign(name, temp, envir = .GlobalEnv)
}
#use custom function to read in all shapefiles
sapply(shp_files, read_shps) %>% invisible()
#fix august_2012 and Dec_2916 shapefiles which are named weird
AUG2012 <- st_2012
AUG2012 <- spTransform(AUG2012, proj4string(JAN2019))
DEC2016 <- DEC2916
rm(st_2012, DEC2916)
#read in ward data
wards <- readOGR(here("Boundaries - Wards (2015-)"), layer = "geo_export_2308d057-9a78-43d2-94ac-9978dec82556")
wards <- spTransform(wards, proj4string(JAN2019))
#read in landmark data
landmarks_shp <-  readOGR(here("Individual Landmarks"), layer = "geo_export_3c7a72b6-7cfa-4d1b-85bf-bc7d064e06e7")
landmarks_shp <- spTransform(landmarks_shp, proj4string(JAN2019))
#get centroid of most recent shpfile
JAN2019@data$CENTROID <- gCentroid(JAN2019, byid = TRUE)
matches <- over(JAN2019$CENTROID, as(NOV2018, "SpatialPolygons"))
JAN2019$NOV2018 <- NOV2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(OCT2018, "SpatialPolygons"))
JAN2019$OCT2018 <- OCT2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(AUG2018, "SpatialPolygons"))
JAN2019$AUG2018 <- AUG2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(JUN2018, "SpatialPolygons"))
JAN2019$JUN2018 <- JUN2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(MAY2018, "SpatialPolygons"))
JAN2019$MAY2018 <- MAY2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(MAR2018, "SpatialPolygons"))
JAN2019$MAR2018 <- MAR2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(FEB2018, "SpatialPolygons"))
JAN2019$FEB2018 <- FEB2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(APR2017, "SpatialPolygons"))
JAN2019$APR2017 <- APR2017$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(DEC2016, "SpatialPolygons"))
JAN2019$DEC2016 <- DEC2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(NOV2016, "SpatialPolygons"))
JAN2019$NOV2016 <- NOV2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(SEP2016, "SpatialPolygons"))
JAN2019$SEP2016 <- SEP2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(MAY2016, "SpatialPolygons"))
JAN2019$MAY2016 <- MAY2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(NOV2015, "SpatialPolygons"))
JAN2019$NOV2015 <- NOV2015$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(JUN2015, "SpatialPolygons"))
JAN2019$JUN2015 <- JUN2015$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(AUG2012, "SpatialPolygons"))
JAN2019$AUG2012 <- AUG2012$Name[matches]
JAN2019$JAN2019 <- JAN2019$ZONE_CLASS
#clean up environment
parcel_data <- JAN2019
rm(list = ls()[grep("20", ls())] )
#match landmarks
landmarks_shp$landmark <- landmarks_shp$landmark %>% as.character()
landmarks_shp <- landmarks_shp[!is.na(landmarks_shp$landmark),]
landmarks_shp$CENTROID <- gCentroid(landmarks_shp, byid = TRUE)
landmarks_shp$PARCEL <- over(landmarks_shp$CENTROID, as(parcel_data, "SpatialPolygons"))
landmarks_shp <- landmarks_shp[!is.na(landmarks_shp$PARCEL),]
parcel_data$LANDMARKED <- NA
parcel_data$LANDMARKED[landmarks_shp$PARCEL] <- landmarks_shp$landmark
#match wards to parcels
ward_matches <- over(parcel_data$CENTROID, as(wards, "SpatialPolygons"))
parcel_data$WARD <- wards$ward[ward_matches]
#clean up environment
rm(landmarks_shp, ward_matches)
#just get a list of changed parcels
changing_parcels <- subset(parcel_data@data, as.character(JAN2019) != as.character(AUG2012), select = OBJECTID)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(rgdal)
library(sp)
library(rgeos)
library(tidyverse)
library(magrittr)
library(here)
#get list of all files in directory
shp_files <- list.files(here("raw_data","zoning_data"))
read_shps <- function(x){
#get directory of specific shapefile
file <- paste0(here("raw_data", "zoning_data"), "/", x)
#get layer name of shapfile in file directory
layer <- list.files(file)[1] %>% substr(1, nchar(list.files(file)[1]) -4)
#read in shapefile
temp <- readOGR(file, layer = layer)
#convert ordinance dates from string to date format
temp@data$EDIT_DATE <- temp@data$EDIT_DATE %>% as.Date()
#assign shapefile name indicating its timeperiod
name <- str_replace_all(layer, " ", "_")
name <- substr(name, nchar(name) - 6, nchar(name))
assign(name, temp, envir = .GlobalEnv)
}
#use custom function to read in all shapefiles
sapply(shp_files, read_shps) %>% invisible()
#fix august_2012 and Dec_2916 shapefiles which are named weird
AUG2012 <- st_2012
AUG2012 <- spTransform(AUG2012, proj4string(JAN2019))
DEC2016 <- DEC2916
rm(st_2012, DEC2916)
#read in ward data
wards <- readOGR(here("raw_data", "Boundaries - Wards (2015-)"), layer = "geo_export_2308d057-9a78-43d2-94ac-9978dec82556")
wards <- spTransform(wards, proj4string(JAN2019))
#read in landmark data
landmarks_shp <-  readOGR(here("raw_data", "Individual Landmarks"), layer = "geo_export_3c7a72b6-7cfa-4d1b-85bf-bc7d064e06e7")
landmarks_shp <- spTransform(landmarks_shp, proj4string(JAN2019))
#get centroid of most recent shpfile
JAN2019@data$CENTROID <- gCentroid(JAN2019, byid = TRUE)
matches <- over(JAN2019$CENTROID, as(NOV2018, "SpatialPolygons"))
JAN2019$NOV2018 <- NOV2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(OCT2018, "SpatialPolygons"))
JAN2019$OCT2018 <- OCT2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(AUG2018, "SpatialPolygons"))
JAN2019$AUG2018 <- AUG2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(JUN2018, "SpatialPolygons"))
JAN2019$JUN2018 <- JUN2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(MAY2018, "SpatialPolygons"))
JAN2019$MAY2018 <- MAY2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(MAR2018, "SpatialPolygons"))
JAN2019$MAR2018 <- MAR2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(FEB2018, "SpatialPolygons"))
JAN2019$FEB2018 <- FEB2018$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(APR2017, "SpatialPolygons"))
JAN2019$APR2017 <- APR2017$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(DEC2016, "SpatialPolygons"))
JAN2019$DEC2016 <- DEC2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(NOV2016, "SpatialPolygons"))
JAN2019$NOV2016 <- NOV2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(SEP2016, "SpatialPolygons"))
JAN2019$SEP2016 <- SEP2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(MAY2016, "SpatialPolygons"))
JAN2019$MAY2016 <- MAY2016$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(NOV2015, "SpatialPolygons"))
JAN2019$NOV2015 <- NOV2015$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(JUN2015, "SpatialPolygons"))
JAN2019$JUN2015 <- JUN2015$ZONE_CLASS[matches]
matches <- over(JAN2019$CENTROID, as(AUG2012, "SpatialPolygons"))
JAN2019$AUG2012 <- AUG2012$Name[matches]
JAN2019$JAN2019 <- JAN2019$ZONE_CLASS
#clean up environment
parcel_data <- JAN2019
rm(list = ls()[grep("20", ls())] )
#match landmarks
landmarks_shp$landmark <- landmarks_shp$landmark %>% as.character()
landmarks_shp <- landmarks_shp[!is.na(landmarks_shp$landmark),]
landmarks_shp$CENTROID <- gCentroid(landmarks_shp, byid = TRUE)
landmarks_shp$PARCEL <- over(landmarks_shp$CENTROID, as(parcel_data, "SpatialPolygons"))
landmarks_shp <- landmarks_shp[!is.na(landmarks_shp$PARCEL),]
parcel_data$LANDMARKED <- NA
parcel_data$LANDMARKED[landmarks_shp$PARCEL] <- landmarks_shp$landmark
#match wards to parcels
ward_matches <- over(parcel_data$CENTROID, as(wards, "SpatialPolygons"))
parcel_data$WARD <- wards$ward[ward_matches]
#clean up environment
rm(landmarks_shp, ward_matches)
zoning_data <- parcel_data@data[c(1, 21:38)]
#note, date is not always mid month, doing this for simplicity
names(zoning_data)[grep("20", names(zoning_data))] <- paste0('15', names(zoning_data)[grep("20", names(zoning_data))])
#put data in long format
zoning_data <- gather(zoning_data, key = "Date", value = "Zoning", -c("OBJECTID", "WARD", "LANDMARKED"))
#convert to dates
zoning_data <- mutate(zoning_data, Date=as.Date(Date, "%d%b%Y"),
LANDMARKED = as.Date(LANDMARKED, format = "%m/%d/%Y"),
WARD = as.numeric(WARD))
#create floor area ratio data
Zoning <- c("RS-1", "RS-2", "RS-3", "RT-3.5", "RT-4", "RT-4A", "RM-4.5", "RM-5", "RM-5.5", "RM-6", "RM-6.5")
#note: RT4-A is 1.2-1.5, but here counting as 1.5
FAR <- c(0.5, 0.65, 0.9, 1.05, 1.2, 1.5, 1.7, 2, 2.5, 4.4, 6.6)
far_levels <- data.frame(Zoning, FAR, stringsAsFactors = F)
#merge floor area ratio data and filter to just residential tracts
zoning_data <- left_join(zoning_data, far_levels, by = "Zoning") %>%
subset(!is.na(FAR), select = c(OBJECTID, WARD, Date, Zoning, FAR, LANDMARKED))
zoning_data <- zoning_data[order(zoning_data$LANDMARKED, zoning_data$OBJECTID),]
#lag the timeseries data
zoning_data_lag <- group_by(zoning_data, OBJECTID) %>%
mutate(LAG_FAR = dplyr::lag(FAR, n = 1, default = NA_character_, order_by = Date))
#get landmark dummies
landmarked_parcels <- filter(zoning_data_lag, LANDMARKED > 0)
landmarked_parcels <- landmarked_parcels[!duplicated(landmarked_parcels[,1:2]),]
landmarked_parcels %<>% mutate(Date = LANDMARKED, LANDMARKED = 1)
#merge landmark dummy obs to parcel dataset
zoning_data_lag$LANDMARKED <- 0 %>% as.numeric()
zoning_data_lag %<>% bind_rows(landmarked_parcels)
#create upzone and downzone dummies
zoning_data_lag$UPZONE <- ifelse(zoning_data_lag$FAR > zoning_data_lag$LAG_FAR, 1, 0)
zoning_data_lag$DOWNZONE <- ifelse(zoning_data_lag$FAR < zoning_data_lag$LAG_FAR, 1, 0)
?write_csv
here()
write_csv(zoning_data_lag, here("clean_data"))
write_csv(zoning_data_lag, here("clean_data", "zoning_data_lag.csv"))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(rgdal)
library(sp)
library(rgeos)
library(tidyverse)
library(magrittr)
library(here)
#get list of all files in directory
shp_files <- list.files(here("raw_data","zoning_data"))
read_shps <- function(x){
#get directory of specific shapefile
file <- paste0(here("raw_data", "zoning_data"), "/", x)
#get layer name of shapfile in file directory
layer <- list.files(file)[1] %>% substr(1, nchar(list.files(file)[1]) -4)
#read in shapefile
temp <- readOGR(file, layer = layer)
#convert ordinance dates from string to date format
temp@data$EDIT_DATE <- temp@data$EDIT_DATE %>% as.Date()
#assign shapefile name indicating its timeperiod
name <- str_replace_all(layer, " ", "_")
name <- substr(name, nchar(name) - 6, nchar(name))
assign(name, temp, envir = .GlobalEnv)
}
#use custom function to read in all shapefiles
sapply(shp_files, read_shps) %>% invisible()
#fix august_2012 and Dec_2916 shapefiles which are named weird
AUG2012 <- st_2012
AUG2012 <- spTransform(AUG2012, proj4string(JAN2019))
DEC2016 <- DEC2916
rm(st_2012, DEC2916)
#read in ward data
wards <- readOGR(here("raw_data", "Boundaries - Wards (2015-)"), layer = "geo_export_2308d057-9a78-43d2-94ac-9978dec82556")
wards <- spTransform(wards, proj4string(JAN2019))
#read in landmark data
landmarks_shp <-  readOGR(here("raw_data", "Individual Landmarks"), layer = "geo_export_3c7a72b6-7cfa-4d1b-85bf-bc7d064e06e7")
landmarks_shp <- spTransform(landmarks_shp, proj4string(JAN2019))
ls()[grep("20", ls())]
#get centroid of most recent shpfile
JAN2019@data$CENTROID <- gCentroid(JAN2019, byid = TRUE)
shp_files <- ls()[grep("20", ls())]
shp_files[1]
matches <- over(JAN2019$CENTROID, as(shp_files[1], "SpatialPolygons"))
matches <- over(JAN2019$CENTROID, as(shp_files[1] %>% noquote(), "SpatialPolygons"))
shp_files[1]
shp_files[1] %>% noquote()
?noquote
eval(shp_files[1])
eval(parse(text = string))
get(shp_files[1])
matches <- over(JAN2019$CENTROID, as(get(shp_files[1]), "SpatialPolygons"))
JAN2019[, shp_files[1]] <- get(shp_files[1])[matches, "ZONE_CLASS"]
summary(matches)
JAN2019[, shp_files[1]] <- get(shp_files[1])[["ZONE_CLASS"]][matches]
get(shp_files[1])[1:5, "ZONE_CLASS"]
shp_files[1]
get(shp_files[1])[matches, "ZONE_CLASS"]
matches[is.na(matches)]
matches <- over(JAN2019$CENTROID, as(get(shp_files[3]), "SpatialPolygons"))
JAN2019[, shp_files[3]] <- get(shp_files[3])[matches, "ZONE_CLASS"]
shp_files
matches <- over(JAN2019$CENTROID, as(get(shp_files[14]), "SpatialPolygons"))
JAN2019[, shp_files[14]] <- get(shp_files[14])[matches, "ZONE_CLASS"]
get(shp_files[14]$ZONE_CLASS)
get(paste0(shp_files[14], "$ZONE_CLASS"))
paste0(shp_files[14], "$ZONE_CLASS")
NOV2018$ZONE_CLASS
get(paste0(shp_files[14], "$ZONE_CLASS") %>% noquote())
get(paste0(shp_files[14], "$ZONE_CLASS") %>% noquote())
get(shp_files[14]$ZONE_CLASS)
get(shp_files[14]$ZONE_CLASS)[, "ZONE_CLASS"]
get(shp_files[14])[, "ZONE_CLASS"]
temp <- get(shp_files[14])
JAN2019[, shp_files[14]] <- temp$ZONE_CLASS[matches]
JAN2019[, "new_col"] <- NA
JAN2019[, "ZONE_CLASS"]
shp_files[14]
JAN2019@data[, shp_files[14]] <- temp$ZONE_CLASS[matches]
for(i in length(shp_files)){
temp <- get(shp_files[i])
matches <- over(JAN2019$CENTROID, as(temp, "SpatialPolygons"))
JAN2019@data[, shp_files[i]] <- temp$ZONE_CLASS[matches]
}
shp_files
length(shp_files)
for(i in length(shp_files)){
print(shp_files[1])}
for(i in length(shp_files)){
print(shp_files[i])}
for(i in length(shp_files)){
print(shp_files[i])}
for(i in 1:length(shp_files)){
print(shp_files[i])}
for(i in 1:length(shp_files)){
temp <- get(shp_files[i])
matches <- over(JAN2019$CENTROID, as(temp, "SpatialPolygons"))
JAN2019@data[, shp_files[i]] <- temp$ZONE_CLASS[matches]
}
#get centroid of most recent shpfile
JAN2019@data$CENTROID <- gCentroid(JAN2019, byid = TRUE)
shp_files <- ls()[grep("20", ls())]
for(i in 1:length(shp_files)){
temp <- get(shp_files[i])
matches <- over(JAN2019$CENTROID, as(temp, "SpatialPolygons"))
JAN2019@data[, shp_files[i]] <- temp$ZONE_CLASS[matches]
}
JAN2019$JAN2019 <- JAN2019$ZONE_CLASS
#clean up environment
parcel_data <- JAN2019
rm(list = ls()[grep("20", ls())] )
#match landmarks
landmarks_shp$landmark <- landmarks_shp$landmark %>% as.character()
landmarks_shp <- landmarks_shp[!is.na(landmarks_shp$landmark),]
landmarks_shp$CENTROID <- gCentroid(landmarks_shp, byid = TRUE)
landmarks_shp$PARCEL <- over(landmarks_shp$CENTROID, as(parcel_data, "SpatialPolygons"))
landmarks_shp <- landmarks_shp[!is.na(landmarks_shp$PARCEL),]
parcel_data$LANDMARKED <- NA
parcel_data$LANDMARKED[landmarks_shp$PARCEL] <- landmarks_shp$landmark
#match wards to parcels
ward_matches <- over(parcel_data$CENTROID, as(wards, "SpatialPolygons"))
parcel_data$WARD <- wards$ward[ward_matches]
#clean up environment
rm(landmarks_shp, ward_matches)
zoning_data <- parcel_data@data[c(1, 21:38)]
NAMES(parcel_data)
names(parcel-data)
names(parcel_data)
zoning_data <- parcel_data@data[,c(1, 21:38)]
zoning_data <- parcel_data@[,c(1, 21:38)]
zoning_data <- parcel_data[,c(1, 21:38)]
shp_files
shp_files %in% names(parcel_data)
